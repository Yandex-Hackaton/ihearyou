"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
"""
import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_session
from data.models import Content, Category
from data.queries import get_button_by_id, get_category_by_id
from sqlmodel import select

from ..keyboards.callbacks import (
    AdminCallback,
    AdminCategoryCallback,
    AdminContentCallback,
    AdminContentActionCallback,
    UserStates
)
from utils.url_utils import clean_url, is_valid_image_url

logger = logging.getLogger(__name__)

admin_router = Router()


@admin_router.callback_query(AdminCallback.filter(F.action == "manage_content"))
async def handle_admin_manage_content(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º' –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    try:
        await state.set_state(UserStates.ADMIN_CATEGORY_VIEW)

        async with get_session() as session:
            keyboard = await get_admin_main_menu_keyboard(session)

            await callback.message.edit_text(
                "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin manage content error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)


@admin_router.callback_query(AdminCategoryCallback.filter())
async def handle_admin_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–æ–º."""
    try:
        callback_data = AdminCategoryCallback.unpack(callback.data)
        category_id = callback_data.category_id

        await state.set_state(UserStates.ADMIN_CONTENT_VIEW)

        async with get_session() as session:
            category = await get_category_by_id(category_id, session)

            if not category:
                await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            keyboard = await get_admin_category_buttons_keyboard(category_id, session)

            await callback.message.edit_text(
                f"üìÇ <b>{category.title}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin category selection error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)


@admin_router.callback_query(AdminContentCallback.filter())
async def handle_admin_content_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º."""
    try:
        callback_data = AdminContentCallback.unpack(callback.data)
        content_id = callback_data.content_id

        await state.set_state(UserStates.ADMIN_CONTENT_MANAGE)

        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                callback_data=AdminContentActionCallback(
                    action="view", 
                    content_id=content_id
                ).pack()
            )
            builder.button(
                text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                callback_data=AdminContentActionCallback(
                    action="upload_image", 
                    content_id=content_id
                ).pack()
            )
            builder.button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É",
                callback_data=AdminCategoryCallback(category_id=content.category_id).pack()
            )
            builder.adjust(1)

            await callback.message.edit_text(
                f"üìÑ <b>{content.title}</b>\n\n"
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º?",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin content selection error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)


@admin_router.callback_query(AdminContentActionCallback.filter())
async def handle_admin_content_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""
    try:
        callback_data = AdminContentActionCallback.unpack(callback.data)
        action = callback_data.action
        content_id = callback_data.content_id

        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            if action == "view":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                text = f"<b>{content.title}</b>\n\n{content.description}"

                if content.url_link:
                    text += f'\n\n<a href="{content.url_link}">üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>'

                builder = InlineKeyboardBuilder()
                builder.button(
                    text="üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                    callback_data=AdminContentCallback(content_id=content_id).pack()
                )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ URL
                if content.file_id:
                    logger.info(f"Attempting to display image for content {content_id} using file_id: {content.file_id}")
                    try:
                        await callback.message.edit_media(
                            media=InputMediaPhoto(
                                media=content.file_id,
                                caption=text,
                                parse_mode="HTML"
                            ),
                            reply_markup=builder.as_markup()
                        )
                        logger.info(f"Successfully displayed image for content {content_id}")
                    except Exception as e:
                        logger.warning(f"Failed to edit media for content {content_id}, falling back to photo: {e}")
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        try:
                            await callback.message.answer_photo(
                                photo=content.file_id,
                                caption=text,
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML"
                            )
                            await callback.message.delete()
                            logger.info(f"Successfully sent photo for content {content_id}")
                        except Exception as e2:
                            logger.warning(f"Failed to send photo for content {content_id}, falling back to text: {e2}")
                            await callback.message.edit_text(
                                text,
                                reply_markup=builder.as_markup(),
                                parse_mode="HTML",
                                disable_web_page_preview=True
                            )
                            logger.info(f"Successfully displayed text for content {content_id}")
                elif content.image_url:
                    # –û—á–∏—â–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    image_url = clean_url(content.image_url)

                    if image_url and image_url.strip() and is_valid_image_url(image_url):
                        logger.info(f"Attempting to display image for content {content_id} using URL: {image_url}")
                        try:
                            await callback.message.edit_media(
                                media=InputMediaPhoto(
                                    media=image_url,
                                    caption=text,
                                    parse_mode="HTML"
                                ),
                                reply_markup=builder.as_markup()
                            )
                            logger.info(f"Successfully displayed image for content {content_id}")
                        except Exception as e:
                            logger.warning(f"Failed to edit media for content {content_id}, falling back to photo: {e}")
                            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                            try:
                                await callback.message.answer_photo(
                                    photo=image_url,
                                    caption=text,
                                    reply_markup=builder.as_markup(),
                                    parse_mode="HTML"
                                )
                                await callback.message.delete()
                                logger.info(f"Successfully sent photo for content {content_id}")
                            except Exception as e2:
                                logger.warning(f"Failed to send photo for content {content_id}, falling back to text: {e2}")
                                await callback.message.edit_text(
                                    text,
                                    reply_markup=builder.as_markup(),
                                    parse_mode="HTML",
                                    disable_web_page_preview=True
                                )
                                logger.info(f"Successfully displayed text for content {content_id}")
                    else:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å image_url, –Ω–æ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if content.image_url and content.image_url.strip():
                            text += f"\n\n‚ö†Ô∏è <i>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {content.image_url}</i>"
                            logger.warning(f"Invalid image URL for content {content_id}: {content.image_url}")
                        
                        await callback.message.edit_text(
                            text,
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML",
                            disable_web_page_preview=True
                        )
                else:
                    # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await callback.message.edit_text(
                        text,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )

            elif action == "upload_image":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await state.set_state(UserStates.UPLOADING_IMAGE)
                await state.update_data(content_id=content_id)
                
                await callback.message.edit_text(
                    f"üì∑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content.title}\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n"
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ URL.",
                    parse_mode="HTML"
                )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin content action error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)


@admin_router.message(UserStates.UPLOADING_IMAGE, F.photo)
async def handle_image_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        data = await state.get_data()
        content_id = data.get('content_id')

        if not content_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await message.bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file_info.file_path}"

        # –û—á–∏—â–∞–µ–º URL –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        file_url = clean_url(file_url)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            content.file_id = file_id
            content.image_url = file_url
            session.add(content)
            await session.commit()

            logger.info(f"Image uploaded for content {content_id}: {file_url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
            url_status = "‚úÖ –í–∞–ª–∏–¥–Ω—ã–π URL" if is_valid_image_url(file_url) else "‚ö†Ô∏è URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await message.answer(
                f"‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
                f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content.title}\n"
                f"File ID: {file_id}\n"
                f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_url}\n"
                f"–°—Ç–∞—Ç—É—Å: {url_status}",
                parse_mode="HTML"
            )

        await state.clear()

    except Exception as e:
        logger.exception(f"Image upload error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await state.clear()


@admin_router.message(UserStates.UPLOADING_IMAGE)
async def handle_non_image_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ). "
        "–î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
    )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ main_menu.py)
async def get_admin_main_menu_keyboard(session) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    builder = InlineKeyboardBuilder()
    query = select(Category).where(Category.is_active)
    result = await session.execute(query)
    categories = result.scalars().all()
    for category in categories:
        builder.button(
            text=category.title,
            callback_data=AdminCategoryCallback(category_id=category.id).pack(),
        )
    builder.adjust(1)
    return builder.as_markup()


async def get_admin_category_buttons_keyboard(
    category_id: int, session
) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    builder = InlineKeyboardBuilder()
    try:
        query = select(Content).where(
            Content.category_id == category_id,
            Content.is_active
        )
        result = await session.execute(query)
        buttons = result.scalars().all()

        for button in buttons:
            builder.button(
                text=button.title,
                callback_data=AdminContentCallback(content_id=button.id).pack(),
            )

        builder.button(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=AdminCallback(action="manage_content").pack()
        )
        builder.adjust(1)

    except Exception:
        builder.button(
            text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            callback_data=AdminCallback(action="manage_content").pack(),
        )
        builder.adjust(1)

    return builder.as_markup()
