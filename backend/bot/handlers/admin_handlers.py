from logging import getLogger
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_session
from data.queries import get_button_by_id, get_category_by_id
from bot.keyboards.callbacks import (
    AdminCallback,
    AdminCategoryCallback,
    AdminContentCallback,
    AdminContentActionCallback,
    UserStates
)
from bot.keyboards.main_menu import (
    get_admin_inline_keyboard,
    get_reminder_type_keyboard,
)
from bot.services.admin_service import AdminService
from bot.services.content_service import ContentService
from bot.services.question_service import QuestionService
from bot.services.reminder_service import ReminderService
from bot.urls import URLBuilder
from bot.filters import Filters
from bot.utils import safe_edit_message, safe_delete_and_send

logger = getLogger(__name__)
admin_router = Router()


@admin_router.message(Filters.ADMIN_PANEL_BUTTON)
async def admin_panel_menu(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""

    keyboard = await get_admin_inline_keyboard()
    await message.answer(
        "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=keyboard
    )
    await message.delete()


@admin_router.message(Filters.REMINDERS_BUTTON)
async def send_reminders_menu(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""

    keyboard = await get_reminder_type_keyboard()
    await message.answer(
        "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, "
        "–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º –Ω–µ–¥–µ–ª—é:",
        reply_markup=keyboard
    )
    await message.delete()


@admin_router.callback_query(
    AdminCallback.filter(F.action == "send_reminder")
)
async def send_reminder_callback(
    callback: CallbackQuery, callback_data: AdminCallback
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""

    reminder_type = callback_data.reminder_type

    # –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminders = URLBuilder.get_reminder_texts()

    reminder_text = reminders.get(reminder_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await safe_edit_message(
        callback,
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        results = await ReminderService.send_reminders_to_inactive_users(
            bot=callback.bot,
            reminder_text=reminder_text,
            days=7
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = (
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {results['total']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {results['sent']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {results['failed']}"
        )

        if results['errors']:
            result_message += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(results['errors'][:5])
            if len(results['errors']) > 5:
                result_message += (
                    f"\n... –∏ –µ—â–µ {len(results['errors']) - 5} –æ—à–∏–±–æ–∫"
                )
        await safe_edit_message(callback, result_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await safe_edit_message(
            callback,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )


@admin_router.callback_query(AdminCallback.filter(F.action == "cancel"))
async def cancel_admin_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞."""
    await callback.message.delete()


@admin_router.callback_query(
    AdminCallback.filter(F.action == "answer_question")
)
async def start_answer(
    query: CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∞–¥–º–∏–Ω–æ–º –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    """
    question_id = callback_data.question_id
    await state.update_data(question_id=question_id)
    await state.set_state(UserStates.ANSWER)
    await query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å #{question_id}:")
    await query.answer()


@admin_router.message(UserStates.ANSWER)
async def process_answer(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return

    await QuestionService.process_admin_answer(message, state)


@admin_router.callback_query(AdminCallback.filter(F.action == "manage_content"))
async def handle_admin_manage_content(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º' –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    try:
        await state.set_state(UserStates.ADMIN_CATEGORY_VIEW)

        async with get_session() as session:
            keyboard = await AdminService.get_admin_main_menu_keyboard(session)

            await safe_delete_and_send(
                callback,
                "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin manage content error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)


@admin_router.callback_query(AdminCategoryCallback.filter())
async def handle_admin_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–æ–º."""
    try:
        callback_data = AdminCategoryCallback.unpack(callback.data)
        category_id = callback_data.category_id

        await state.set_state(UserStates.ADMIN_CONTENT_VIEW)

        async with get_session() as session:
            category = await get_category_by_id(category_id, session)

            if not category:
                await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            keyboard = await AdminService.get_admin_category_buttons_keyboard(
                category_id, session
            )

            text = (
                f"üìÇ <b>{category.title}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            )
            await safe_delete_and_send(
                callback,
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin category selection error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)


@admin_router.callback_query(AdminContentCallback.filter())
async def handle_admin_content_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º."""
    try:
        callback_data = AdminContentCallback.unpack(callback.data)
        content_id = callback_data.content_id

        await state.set_state(UserStates.ADMIN_CONTENT_MANAGE)

        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                callback_data=AdminContentActionCallback(
                    action="view", 
                    content_id=content_id
                ).pack()
            )
            builder.button(
                text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                callback_data=AdminContentActionCallback(
                    action="upload_image",
                    content_id=content_id
                ).pack()
            )
            builder.button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É",
                callback_data=AdminCategoryCallback(
                    category_id=content.category_id
                ).pack()
            )
            builder.adjust(1)

            text = (
                f"üìÑ <b>{content.title}</b>\n\n"
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º?"
            )
            await safe_delete_and_send(
                callback,
                text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin content selection error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)


@admin_router.callback_query(AdminContentActionCallback.filter())
async def handle_admin_content_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."""
    try:
        callback_data = AdminContentActionCallback.unpack(callback.data)
        action = callback_data.action
        content_id = callback_data.content_id

        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            if action == "view":
                await ContentService.display_content_for_admin(callback, content)
            elif action == "upload_image":
                await AdminService.start_image_upload(
                    callback, state, content
                )

        await callback.answer()

    except Exception as e:
        logger.exception(f"Admin content action error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)


@admin_router.message(UserStates.UPLOADING_IMAGE, F.photo)
async def handle_image_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        data = await state.get_data()
        content_id = data.get('content_id')

        if not content_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            await state.clear()
            return

        await AdminService.process_image_upload(
            message, state, content_id
        )

    except Exception as e:
        logger.exception(f"Image upload error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await state.clear()


@admin_router.message(UserStates.UPLOADING_IMAGE)
async def handle_non_image_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ). "
        "–î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
    )
