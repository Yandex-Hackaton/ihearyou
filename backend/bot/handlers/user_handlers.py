from logging import getLogger
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.db import get_session
from data.queries import (
    get_button_by_id,
    get_category_by_id,
    get_or_create_user,
)
from bot.config import ADMINS
from bot.urls import URLs, URLBuilder
from bot.keyboards.callbacks import (
    CategoryCallback,
    ButtonCallback,
    FeedbackCallback,
    RatingCallback,
    UserStates
)
from bot.keyboards.main_menu import (
    get_category_buttons_keyboard,
    get_feedback_keyboard,
    get_main_menu_keyboard,
    get_rating_keyboard,
)
from bot.services.content_service import ContentService
from bot.services.question_service import QuestionService
from bot.services.rating_service import RatingService
from bot.filters import Filters
from bot.utils import safe_edit_message, safe_delete_and_send

logger = getLogger(__name__)
user_router = Router()


@user_router.callback_query(F.data.startswith("category:"))
async def handle_category_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        callback_data = CategoryCallback.unpack(callback.data)
        logger.info(
            f"Category selected: {callback_data.category_id} "
            f"by user {callback.from_user.id}"
        )

        await state.set_state(UserStates.CATEGORY_VIEW)

        async with get_session() as session:
            category = await get_category_by_id(
                callback_data.category_id,
                session
            )

            if not category:
                logger.warning(
                    "Category not found: "
                    f"{callback_data.category_id}"
                )
                await callback.answer(
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    show_alert=True
                )
                return

            keyboard = await get_category_buttons_keyboard(
                callback_data.category_id, session
            )

            await safe_delete_and_send(
                callback,
                f"üìÇ {category.title}\n\n"
                f"{(category.description or '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:')}",
                reply_markup=keyboard,
            )

        await callback.answer()

    except Exception as e:
        logger.exception(
            f"Category callback error: {e} "
            f"(user: {callback.from_user.id})"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@user_router.callback_query(F.data == "go_main")
async def handle_go_to_main_menu_callback(
    callback: CallbackQuery,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info(f"Go to main menu: {callback.from_user.id}")

        await state.set_state(UserStates.MAIN_MENU)

        async with get_session() as session:
            keyboard = await get_main_menu_keyboard(session)
            await safe_delete_and_send(
                callback,
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=keyboard,
            )

        await callback.answer()

    except Exception as e:
        logger.exception(
            f"Go to main menu error: {e} "
            f"(user: {callback.from_user.id})"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@user_router.callback_query(F.data.startswith("button:"))
async def handle_button_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    try:
        callback_data = ButtonCallback.unpack(callback.data)
        logger.info(
            f"Button selected: {callback_data.button_id} "
            f"by user {callback.from_user.id}"
        )

        await state.set_state(UserStates.BUTTON_CONTENT)

        async with get_session() as session:
            button = await get_button_by_id(callback_data.button_id, session)

            if not button:
                logger.warning(f"Button not found: {callback_data.button_id}")
                await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            button.views_count += 1
            session.add(button)
            await session.commit()
            logger.info(
                f"Updated views for content_id {button.id} "
                f"to {button.views_count}"
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            await ContentService.display_content(
                callback, button, get_feedback_keyboard
            )

        await callback.answer()

    except Exception as e:
        logger.exception(
            f"Button callback error: {e} "
            f"(user: {callback.from_user.id})"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@user_router.message(F.text == "‚úÖ –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    """
    logger.info(
        f"User {message.from_user.id} requested categories from main menu"
    )
    await state.set_state(UserStates.MAIN_MENU)
    async with get_session() as session:
        inline_keyboard = await get_main_menu_keyboard(session)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=inline_keyboard
        )
    await message.delete()


@user_router.message(Filters.QUESTION_BUTTON)
async def ask_question_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.
    """
    await state.set_state(UserStates.QUESTION)
    await message.answer(
        "–ù–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? "
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç."
    )
    await message.delete()


@user_router.message(UserStates.QUESTION)
async def process_question(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    try:
        if not message.text or message.text.startswith('/'):
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º. "
                "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
            return

        await QuestionService.process_user_question(
            message, state, ADMINS, URLs.ADMIN_QUESTION_URL
        )

    except Exception as e:
        logger.exception(
            "Error processing question from user "
            f"{message.from_user.id}: {e}"
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        await state.clear()


@user_router.message(Filters.HELP_BUTTON)
async def help_request(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'."""
    await message.answer(
        "–ú—ã –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–µ, "
        "—Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
    )
    await message.delete()


@user_router.message(Filters.MATERIALS_BUTTON)
async def handle_useful_materials(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'"""
    logger.info(f"Useful materials requested: {message.from_user.id}")

    text = URLBuilder.get_useful_materials_text()
    await message.answer(
        text,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await message.delete()


@user_router.callback_query(FeedbackCallback.filter())
async def handle_feedback_callback(
    callback: CallbackQuery,
    callback_data: FeedbackCallback,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ø–æ–ª–µ–∑–Ω–æ/–Ω–µ –ø–æ–º–æ–≥–ª–æ)"""
    try:
        user_id = callback.from_user.id
        content_id = callback_data.content_id
        action = callback_data.action

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ë–î
        async with get_session() as session:
            user = await get_or_create_user(callback.from_user, session)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            rating_obj = await RatingService.get_or_create_rating(
                user.telegram_id, content_id, session
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating_obj.is_helpful = (action == "helpful")
            session.add(rating_obj)
            await session.commit()

            logger.info(f"Feedback saved: user {user_id}, content {content_id}, helpful={action == 'helpful'}")

        if action == "helpful":
            await state.set_state(UserStates.REVIEW)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º content_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(content_id=content_id)

            text = (
                "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å! üòä\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª."
            )
            keyboard = get_rating_keyboard(content_id)
            await safe_delete_and_send(
                callback,
                text,
                reply_markup=keyboard
            )
            await callback.answer()

        elif action == "unhelpful":
            text = (
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! "
                "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª. üôè"
            )
            async with get_session() as session:
                button = await get_button_by_id(content_id, session)
                builder = InlineKeyboardBuilder()
                if button:
                    builder.row(
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=CategoryCallback(
                                category_id=button.category_id).pack()
                        )
                    )
                await safe_delete_and_send(
                    callback,
                    text,
                    reply_markup=builder.as_markup()
                )
            await callback.answer()

    except Exception as e:
        logger.exception(
            f"Feedback callback error: {e} "
            f"(user: {callback.from_user.id})"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            show_alert=True
        )


@user_router.callback_query(
    UserStates.REVIEW,
    RatingCallback.filter()
)
async def handle_rating_callback(
    callback: CallbackQuery,
    callback_data: RatingCallback,
    state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π ‚≠ê."""
    try:
        user_id = callback.from_user.id
        rating = callback_data.rating
        data = await state.get_data()
        content_id = data.get('content_id')

        if not content_id:
            logger.error(f"Content ID not found in state for user {user_id}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞", 
                show_alert=True
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
        async with get_session() as session:
            user = await get_or_create_user(callback.from_user, session)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            rating_obj = await RatingService.get_or_create_rating(
                user.telegram_id, content_id, session
            )

            rating_obj.score = rating
            session.add(rating_obj)
            await session.commit()

            logger.info(f"Rating saved: user {user_id}, content {content_id}, score={rating}")

        await safe_delete_and_send(
            callback,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! ‚≠ê",
            reply_markup=None
        )
        await callback.answer()
        await state.clear()

    except Exception as e:
        logger.exception(
            f"Rating callback error: {e} "
            f"(user: {callback.from_user.id})"
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏",
            show_alert=True
        )
