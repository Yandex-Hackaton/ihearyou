from logging import getLogger
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlmodel import select

from data.db import get_session
from data.models import Content, Category
from data.queries import get_button_by_id
from bot.keyboards.callbacks import (
    AdminCallback,
    AdminCategoryCallback,
    AdminContentCallback,
    UserStates
)
from bot.urls import URLBuilder
from utils.url_utils import clean_url, is_valid_image_url
from bot.utils import safe_edit_message, validate_photo, BotValidators

logger = getLogger(__name__)


class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    @staticmethod
    async def get_admin_main_menu_keyboard(session) -> InlineKeyboardBuilder:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
        """
        builder = InlineKeyboardBuilder()
        query = select(Category).where(Category.is_active)
        result = await session.execute(query)
        categories = result.scalars().all()
        for category in categories:
            builder.button(
                text=category.title,
                callback_data=AdminCategoryCallback(category_id=category.id).pack(),
            )
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def get_admin_category_buttons_keyboard(
        category_id: int, session
    ) -> InlineKeyboardBuilder:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.
        """
        builder = InlineKeyboardBuilder()
        try:
            query = select(Content).where(
                Content.category_id == category_id,
                Content.is_active
            )
            result = await session.execute(query)
            buttons = result.scalars().all()

            for button in buttons:
                builder.button(
                    text=button.title,
                    callback_data=AdminContentCallback(content_id=button.id).pack(),
                )

            builder.button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data=AdminCallback(
                    action="manage_content"
                ).pack()
            )
            builder.adjust(1)

        except Exception:
            builder.button(
                text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                callback_data=AdminCallback(action="manage_content").pack(),
            )
            builder.adjust(1)

        return builder.as_markup()

    @staticmethod
    async def start_image_upload(
        callback: CallbackQuery, 
        state: FSMContext, 
        content: Content
    ):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await state.set_state(UserStates.UPLOADING_IMAGE)
        await state.update_data(content_id=content.id)

        text = (
            f"üì∑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content.title}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n"
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ URL."
        )
        
        await safe_edit_message(callback, text, parse_mode="HTML")

    @staticmethod
    async def process_image_upload(message, state: FSMContext, content_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        validation_result = validate_photo(message, BotValidators.ADMIN_IMAGE)
        if not validation_result.is_valid:
            await message.answer(f"‚ùå {validation_result.errors[0]}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_id = photo.file_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await message.bot.get_file(file_id)
        file_url = URLBuilder.get_telegram_file_url(message.bot.token, file_info.file_path)

        # –û—á–∏—â–∞–µ–º URL –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        file_url = clean_url(file_url)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            content = await get_button_by_id(content_id, session)

            if not content:
                await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            content.file_id = file_id
            content.image_url = file_url
            session.add(content)
            await session.commit()

            logger.info(f"Image uploaded for content {content_id}: {file_url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
            url_status = "‚úÖ" if is_valid_image_url(file_url) else "‚ö†Ô∏è URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            await message.answer(
                f"‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
                f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content.title}\n"
                f"–°—Ç–∞—Ç—É—Å: {url_status}",
                parse_mode="HTML"
            )

        await state.clear()
