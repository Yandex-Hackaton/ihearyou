from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from keybords.callbacks import MainMenuCallback, ButtonCallback, UserStates
from keybords.main_menu import get_main_menu_keyboard, get_category_buttons_keyboard
from db_handler.queries import get_category_by_id, get_button_by_id
from data.db import get_session

callback_router = Router()


@callback_router.callback_query(F.data.startswith("main_menu:"))
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        callback_data = MainMenuCallback.unpack(callback.data)
        
        if callback_data.category_id == 0:
            # Return to main menu
            await state.set_state(UserStates.MAIN_MENU)
            
            async for session in get_session():
                keyboard = await get_main_menu_keyboard(session)
                await callback.message.edit_text(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=keyboard
                )
                break
        else:
            await state.set_state(UserStates.CATEGORY_VIEW)
            
            async for session in get_session():
                category = await get_category_by_id(callback_data.category_id, session)
                
                if not category:
                    await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return
                
                keyboard = await get_category_buttons_keyboard(callback_data.category_id, session)
                
                await callback.message.edit_text(
                    f"üìÇ {category.title}\n\n{category.description or '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:'}",
                    reply_markup=keyboard
                )
                break
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        print(f"Error in main menu callback: {e}")


@callback_router.callback_query(F.data.startswith("button:"))
async def handle_button_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    try:
        callback_data = ButtonCallback.unpack(callback.data)
        await state.set_state(UserStates.BUTTON_CONTENT)
        
        async for session in get_session():
            button = await get_button_by_id(callback_data.button_id, session)
            
            if not button:
                await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            text = f"üìå {button.title}\n\n"
            
            if button.description:
                text += f"üìù {button.description}\n\n"
            
            if button.content:
                text += f"üìÑ {button.content}"
            else:
                text += "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            
            # Create keyboard with "Back" button
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MainMenuCallback(category_id=button.category_id).pack())]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard
            )
            break
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        print(f"Error in button callback: {e}")